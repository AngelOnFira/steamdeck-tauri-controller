name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: false
          generate_release_notes: true

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          # - platform: 'macos-latest'
          #   args: '--target aarch64-apple-darwin'
          #   target: 'aarch64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libudev-dev


      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: swatinem/rust-cache@v2

      # # Cache dx build artifacts to speed up frontend builds
      # - name: Cache dx build
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       target/dx/
      #     key: ${{ runner.os }}-dx-${{ hashFiles('**/Cargo.lock', 'Dioxus.toml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-dx-

      # Cache Cargo registry and git dependencies for dx
      - name: Cache Cargo registry and git
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Install Dioxus CLI for building the frontend
      # cargo-binstall downloads pre-compiled binaries for faster installation
      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@v1.15.6

      - name: Install Dioxus CLI
        run: cargo binstall dioxus-cli --no-confirm --force

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        id: tauri-action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    
    steps:
      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true